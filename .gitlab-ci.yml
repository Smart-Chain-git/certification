#
# GITLAB - CI
#

# We use a gradle image to run all stages of the pipeline.
# Each stage runs a bare (not wrapped) `gradle ...` command.
image: $BUILD_IMAGE

# The pipeline consists of several stages. Each one is run in parallel.
stages:
  - test # runs all the tests of the application.
  - build
  - publish

# Sets the environement variables before executing scripts.
variables:
  # Timezone for unit tests that use date
  TZ: "Europe/Paris"
  # Disable daemon for gradle
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  BUILD_IMAGE: "swordedi/ci-gradlenode:6.3-12"
  DAEMON_IMAGE_NAME: "swordedi/tezos-digisign-daemon"
  REST_IMAGE_NAME: "swordedi/tezos-digisign-daemon"
  RSOCKET_IMAGE_NAME: "swordedi/tezos-digisign-daemon"

# Fix double pipelines on merge requests.
include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

# Before each stage's script.
before_script:
  - echo `pwd` # debug
  - echo "$CI_BUILD_NAME, $CI_BUILD_REF_NAME $CI_BUILD_STAGE" # debug
  - export GRADLE_USER_HOME=`pwd`/.gradle

#
# Stage: test
#

test:
  stage: test
  # We tell gitlab-ci to use a machine running the docker-runner from gitlab.
  # Here, we need the script to be run in a docker image (using the gradle image defined above).
  tags:
    - docker
  # We can use the bare gradle command here because of the gradle docker image.
  # We use the `continue` option to display each test failure in the console instead of only the first one.
  script:
    - gradle test --continue
  # We create an artifact to be passed to the next stage.
  # Artifact contain the backend related compiled classes and ressources.
  artifacts:
    expire_in: 5 hrs
    when: always
    paths:
      - "*/*/build"

#
# Stage: build
#

build:
  stage: build
  tags:
    - docker
  script:
    - gradle assemble
  artifacts:
    expire_in: 5 hrs
    when: always
    paths:
      - "*/*/build"

#
# Stage: publish
#

publish:sonar:
  stage: publish
  dependencies:
    - build
  tags:
    - docker
  rules:
    - if: '$CI_OWNER == "sword" && $CI_COMMIT_BRANCH == "master" || $CI_OWNER == "sword" && $CI_COMMIT_TAG'
      when: on_success
  script:
    # Build and upload the result of sonarqube analysis.
    # http://sonarqube.sonar.10.20.2.179.xip.io/dashboard?id=com.kami%3Aoutside
    - gradle check jacocoRootReport sonarqube

# Publish the JAR to the nexus
publish:jar:
  stage: publish
  dependencies:
    - build
  tags:
    - docker
  rules:
    - if: '$CI_OWNER == "sword" && $CI_COMMIT_BRANCH == "master" || $CI_OWNER == "sword" && $CI_COMMIT_TAG'
      when: on_success
  script:
    - gradle publish -PmavenProxyUrl=$MAVEN_PROXY_URL -PnexusUrl=$NEXUS_URL -PnexusUser=$NEXUS_USER -PnexusPassword=$NEXUS_PASSWORD -PreleasesRepo=$RELEASES_REPO -PsnapshotsRepo=$SNAPSHOTS_REPO

publish:docker:daemon:
  stage: publish
  dependencies:
    - build
  tags:
    - dockerBuild
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_TAG'
      when: on_success
    - when: manual
      allow_failure: true
  script:
    # Create the unpacked folder.
    - mkdir backend/daemon/build/unpacked
    # Unpack the jar for light docker image.
    - (cd backend/daemon/build/unpacked; jar -xf ../libs/*.jar)
    # Build the docker image tagged either with git branch name or tag.
    - docker build -t $DAEMON_IMAGE_NAME:$CI_COMMIT_REF_NAME backend/daemon
    # Push the image to the registry.
    - docker push $DAEMON_IMAGE_NAME:$CI_COMMIT_REF_NAME
    # Remove image from runner local registry.
    - docker rmi $DAEMON_IMAGE_NAME:$CI_COMMIT_REF_NAME

publish:docker:rest:
  stage: publish
  dependencies:
    - build
  tags:
    - dockerBuild
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_TAG'
      when: on_success
    - when: manual
      allow_failure: true
  script:
    # Create the unpacked folder.
    - mkdir frontend/rest/build/unpacked
    # Unpack the jar for light docker image.
    - (cd frontend/rest/build/unpacked; jar -xf ../libs/*.jar)
    # Build the docker image tagged either with git branch name or tag.
    - docker build -t $REST_IMAGE_NAME:$CI_COMMIT_REF_NAME frontend/rest
    # Push the image to the registry.
    - docker push $REST_IMAGE_NAME:$CI_COMMIT_REF_NAME
    # Remove image from runner local registry.
    - docker rmi $REST_IMAGE_NAME:$CI_COMMIT_REF_NAME

publish:docker:rsocket:
  stage: publish
  dependencies:
    - build
  tags:
    - dockerBuild
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_TAG'
      when: on_success
    - when: manual
      allow_failure: true
  script:
    # Create the unpacked folder.
    - mkdir frontend/rsocket/build/unpacked
    # Unpack the jar for light docker image.
    - (cd frontend/rsocket/build/unpacked; jar -xf ../libs/*.jar)
    # Build the docker image tagged either with git branch name or tag.
    - docker build -t $RSOCKET_IMAGE_NAME:$CI_COMMIT_REF_NAME frontend/rsocket
    # Push the image to the registry.
    - docker push $RSOCKET_IMAGE_NAME:$CI_COMMIT_REF_NAME
    # Remove image from runner local registry.
    - docker rmi $RSOCKET_IMAGE_NAME:$CI_COMMIT_REF_NAME
